# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Bazel-Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY_NAME: "vishesh"
  CLUSTER_NAME: "k8stest"
  CLUSTER_RESOURCE_GROUP: "azure-k8stest"
  NAMESPACE: "default"
  APP_NAME: "bazel-java"
  SECRET: "az-secret"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
#     - name: Set up JDK 11
#       uses: actions/setup-java@v2
#       with:
#         java-version: '11'
#         distribution: 'adopt'
    - uses: actions/cache@v2
      with:
        path: "~/.cache/bazel"
        key: bazel
#     - run: bazel build //:...
    - run: bazel build //:ProjectRunner
    - name: Prepare Image
      run: |
        mkdir image
        cp Dockerfile image/
        cp bazel-bin/ProjectRunner.jar image/
        cd image
        
#     - run: java -cp bazel-bin/ProjectRunner.jar com.example.ProjectRunner
#     - run: bazel build //:java_image
#     - name: Login to Docker Hub
#       uses: docker/login-action@v1
#       with:
#         username: codesparrow
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
#     -
#       name: Set up Docker Build
#       uses: docker/setup-buildx-action@v1
#     -
#       name: Build and push
#       uses: docker/build-push-action@v2
#       with:
#         context: .
#         file: ./dockerfile
#         push: true
#         tags: codesparrow/my-react-app:latest

    - name: Azure build and push 
      uses: azure/docker-login@v1
      with:
        login-server: vishesh.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - run: docker build . -t vishesh.azurecr.io/bazel-java:${{ github.sha }}
    
      #    - name: Container Scanning
      #uses: Azure/container-scan@v0
      #with:
      #  image-name: vishesh.azurecr.io/bazel-java:${{ github.sha }}
        
    - name: ACR push 
      run: docker push vishesh.azurecr.io/bazel-java:${{ github.sha }}


    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.ACR_USERNAME }}
        container-registry-password: ${{ secrets.ACR_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        force: true
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/deployment.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}

